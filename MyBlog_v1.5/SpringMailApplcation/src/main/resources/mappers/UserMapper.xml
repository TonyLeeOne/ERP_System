<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tony.blog.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.tony.blog.entity.User">
        <id column="uid" jdbcType="VARCHAR" property="uid"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="level" jdbcType="INTEGER" property="level"/>
        <collection property="role" ofType="com.tony.blog.entity.Role">
            <id column="rid" jdbcType="VARCHAR" property="rid"></id>
            <result column="rname" jdbcType="VARCHAR" property="rname"></result>
            <collection property="module" ofType="com.tony.blog.entity.Module">
                <id column="mid" jdbcType="VARCHAR" property="mid"></id>
                <result column="mname" jdbcType="VARCHAR" property="mname"></result>
            </collection>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
    uid, username, password, level
  </sql>

    <!--根据用户名查找其角色和权限信息-->
    <select id="findUserByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where username = #{username,jdbcType=VARCHAR}
    </select>

    <!--添加用户及其角色-->
    <insert id="insertUserRole" parameterType="map">
        insert into user_role
        <foreach collection="map.keys" item="key" separator="," open="(" close=")">
            ${key}
        </foreach>
        values
        <foreach collection="map.keys" item="key" separator="," open="(" close=")">
            #{map[${key}]}
        </foreach>
    </insert>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">

        select
        <include refid="Base_Column_List"/>
        from user
        where uid = #{uid,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    
    delete from user
    where uid = #{uid,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.tony.blog.entity.User" useGeneratedKeys="true" keyProperty="uid">
    
    insert into user (uid,username, password,
      level)
    values (#{uid,jdbcType=VARCHAR},#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{level,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.tony.blog.entity.User">

        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="level != null">
                level,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.tony.blog.entity.User">
        update user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level,jdbcType=INTEGER},
            </if>
        </set>
        where uid = #{uid,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.tony.blog.entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER}
    where uid = #{uid,jdbcType=VARCHAR}
  </update>
    <!--根据用户名查找其角色和权限信息-->
    <select id="findUserName" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT u.*,r.*,m.* FROM user u inner join user_role ur on ur.uid=u.uid
    inner join role r on r.rid=ur.rid
    inner join role_module mr on mr.rid=r.rid
    inner join module m on mr.mid=m.mid
    WHERE username=#{username,jdbcType=VARCHAR};
    </select>

    <select id="findAll" resultMap="BaseResultMap">
    SELECT u.*,r.*,m.* FROM user u inner join user_role ur on ur.uid=u.uid
    inner join role r on r.rid=ur.rid
    inner join role_module mr on mr.rid=r.rid
    inner join module m on mr.mid=m.mid
    </select>

</mapper>